// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4MtuMCBBSpY2eFK9ZdJ5Mb
// Component: vwbj5ATcsBQR

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { TabsContainer } from "@plasmicpkgs/plasmic-tabs";
import { TabButton } from "@plasmicpkgs/plasmic-tabs";
import Button from "../../Button"; // plasmic-import: lBHNzts6tFyj/component
import { TabUnderline } from "@plasmicpkgs/plasmic-tabs";
import { TabContent } from "@plasmicpkgs/plasmic-tabs";
import Select from "../../Select"; // plasmic-import: 0dhDI4-ZqEDz/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 4MtuMCBBSpY2eFK9ZdJ5Mb/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: vwbj5ATcsBQR/css

import ChecksvgIcon from "../plasmic_tabs/icons/PlasmicIcon__Checksvg"; // plasmic-import: zq2s7N0xWucT/icon
import IconIcon from "../plasmic_tabs/icons/PlasmicIcon__Icon"; // plasmic-import: 8K40faRNhuCj/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  cpc?: Flex__<"div">;
  tabsContainer?: Flex__<typeof TabsContainer>;
  tabUnderline?: Flex__<typeof TabUnderline>;
  select7?: Flex__<typeof Select>;
  select8?: Flex__<typeof Select>;
  select9?: Flex__<typeof Select>;
  select10?: Flex__<typeof Select>;
  select11?: Flex__<typeof Select>;
  select?: Flex__<typeof Select>;
  select2?: Flex__<typeof Select>;
  select3?: Flex__<typeof Select>;
  select4?: Flex__<typeof Select>;
  select5?: Flex__<typeof Select>;
};

export interface DefaultHomepageProps {
  className?: string;
}

const $$ = {};

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select7.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select8.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select9.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select10.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select11.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"cpc"}
          data-plasmic-override={overrides.cpc}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.cpc
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__pcJlK)}>
            <div className={classNames(projectcss.all, sty.freeBox__euBuN)}>
              <TabsContainer
                data-plasmic-name={"tabsContainer"}
                data-plasmic-override={overrides.tabsContainer}
                className={classNames("__wab_instance", sty.tabsContainer)}
                initialKey={"tab1"}
              >
                <DataCtxReader__>
                  {$ctx => (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__pj1VV)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___9SpQs
                        )}
                      >
                        {
                          "This tool allows subscribers to view an estimated current and recent wholesale market price of credits based on five credit characteristics selected (project type, country, project start date, vintage, and CCB status). On the user-defined tab, two credit prices can be shown at the same time on the left and right of the page. The tool also shows an error range around the CPC estimated price, and the x-axis on the chart can be switched between Transaction Date (showing the price over time) and Credit Vintage (showing how the current estimated price for each project differs by vintage). On the specific-projects tab, subscribers can select a project and vintage from the drop down lists, and the price is estimated based on that project's five core characteristics. The calculator estimates prices via a machine learning algorithm that uses a multi-variate time-series regression on tens of thousands of prices in MSCI Carbon Market\u2019s proprietary database. More detail on the methodology can be found in the notes below the chart."
                        }
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__sgtxv
                        )}
                      >
                        <TabButton
                          className={classNames(
                            "__wab_instance",
                            sty.tabButton__d4Jgb
                          )}
                          tabKey={"tab1"}
                        >
                          <Button>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__teAcM
                              )}
                            >
                              {"Tab 1"}
                            </div>
                          </Button>
                        </TabButton>
                        <TabButton
                          className={classNames(
                            "__wab_instance",
                            sty.tabButton__q8Tbi
                          )}
                          tabKey={"tab2"}
                        >
                          <Button>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__mrq2X
                              )}
                            >
                              {"Tab 2"}
                            </div>
                          </Button>
                        </TabButton>
                        <TabUnderline
                          data-plasmic-name={"tabUnderline"}
                          data-plasmic-override={overrides.tabUnderline}
                          className={classNames(
                            "__wab_instance",
                            sty.tabUnderline
                          )}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__qr0Qn
                        )}
                      >
                        <TabContent
                          className={classNames(
                            "__wab_instance",
                            sty.tabContent__qvr97
                          )}
                          tabKey={"tab1"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.columns__saQew
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column__nqPNq
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__hwYcw
                                )}
                              >
                                {"Enter some text"}
                              </div>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column__sTr1V
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__ykoLb
                                )}
                              >
                                {"Enter some text"}
                              </div>
                            </div>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__h3MbB
                            )}
                          >
                            <Stack__
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__aLhn0
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.columns__eym5P
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.column__rW0N
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.columns__z2Ta
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.column__ukEqU
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__kVBj
                                        )}
                                      >
                                        {"Enter some text"}
                                      </div>
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.column___9ZGy
                                      )}
                                    >
                                      <Select
                                        data-plasmic-name={"select7"}
                                        data-plasmic-override={
                                          overrides.select7
                                        }
                                        className={classNames(
                                          "__wab_instance",
                                          sty.select7
                                        )}
                                        onChange={(...eventArgs) => {
                                          generateStateOnChangeProp($state, [
                                            "select7",
                                            "value"
                                          ])(eventArgs[0]);
                                        }}
                                        options={[
                                          {
                                            value: "option1",
                                            label: "Option 1"
                                          },
                                          {
                                            value: "option2",
                                            label: "Option 2"
                                          }
                                        ]}
                                        value={generateStateValueProp($state, [
                                          "select7",
                                          "value"
                                        ])}
                                      />
                                    </div>
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.columns__xRsqH
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.column__fIjix
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__ge3Ix
                                        )}
                                      >
                                        {"Enter some text"}
                                      </div>
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.column__qNWeT
                                      )}
                                    >
                                      <Select
                                        data-plasmic-name={"select8"}
                                        data-plasmic-override={
                                          overrides.select8
                                        }
                                        className={classNames(
                                          "__wab_instance",
                                          sty.select8
                                        )}
                                        onChange={(...eventArgs) => {
                                          generateStateOnChangeProp($state, [
                                            "select8",
                                            "value"
                                          ])(eventArgs[0]);
                                        }}
                                        options={[
                                          {
                                            value: "option1",
                                            label: "Option 1"
                                          },
                                          {
                                            value: "option2",
                                            label: "Option 2"
                                          }
                                        ]}
                                        value={generateStateValueProp($state, [
                                          "select8",
                                          "value"
                                        ])}
                                      />
                                    </div>
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.columns__jmkc6
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.column__hSw4D
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text___0MnaK
                                        )}
                                      >
                                        {"Enter some text"}
                                      </div>
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.column__h387
                                      )}
                                    >
                                      <Select
                                        data-plasmic-name={"select9"}
                                        data-plasmic-override={
                                          overrides.select9
                                        }
                                        className={classNames(
                                          "__wab_instance",
                                          sty.select9
                                        )}
                                        onChange={(...eventArgs) => {
                                          generateStateOnChangeProp($state, [
                                            "select9",
                                            "value"
                                          ])(eventArgs[0]);
                                        }}
                                        options={[
                                          {
                                            value: "option1",
                                            label: "Option 1"
                                          },
                                          {
                                            value: "option2",
                                            label: "Option 2"
                                          }
                                        ]}
                                        value={generateStateValueProp($state, [
                                          "select9",
                                          "value"
                                        ])}
                                      />
                                    </div>
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.columns__zjbQd
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.column__xuyXh
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__nfYc
                                        )}
                                      >
                                        {"Enter some text"}
                                      </div>
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.column__wzcjd
                                      )}
                                    >
                                      <Select
                                        data-plasmic-name={"select10"}
                                        data-plasmic-override={
                                          overrides.select10
                                        }
                                        className={classNames(
                                          "__wab_instance",
                                          sty.select10
                                        )}
                                        onChange={(...eventArgs) => {
                                          generateStateOnChangeProp($state, [
                                            "select10",
                                            "value"
                                          ])(eventArgs[0]);
                                        }}
                                        options={[
                                          {
                                            value: "option1",
                                            label: "Option 1"
                                          },
                                          {
                                            value: "option2",
                                            label: "Option 2"
                                          }
                                        ]}
                                        value={generateStateValueProp($state, [
                                          "select10",
                                          "value"
                                        ])}
                                      />
                                    </div>
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.columns__nyv9P
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.column__qlYM
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__om6I5
                                        )}
                                      >
                                        {"Enter some text"}
                                      </div>
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.column__zIYnj
                                      )}
                                    >
                                      <Select
                                        data-plasmic-name={"select11"}
                                        data-plasmic-override={
                                          overrides.select11
                                        }
                                        className={classNames(
                                          "__wab_instance",
                                          sty.select11
                                        )}
                                        onChange={(...eventArgs) => {
                                          generateStateOnChangeProp($state, [
                                            "select11",
                                            "value"
                                          ])(eventArgs[0]);
                                        }}
                                        options={[
                                          {
                                            value: "option1",
                                            label: "Option 1"
                                          },
                                          {
                                            value: "option2",
                                            label: "Option 2"
                                          }
                                        ]}
                                        value={generateStateValueProp($state, [
                                          "select11",
                                          "value"
                                        ])}
                                      />
                                    </div>
                                  </div>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.column___3NtcU
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.columns__aiNhJ
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.column__egeO0
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__rw8ZB
                                        )}
                                      >
                                        {"Enter some text"}
                                      </div>
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.column___3ZAsU
                                      )}
                                    >
                                      <Select
                                        data-plasmic-name={"select"}
                                        data-plasmic-override={overrides.select}
                                        className={classNames(
                                          "__wab_instance",
                                          sty.select
                                        )}
                                        onChange={(...eventArgs) => {
                                          generateStateOnChangeProp($state, [
                                            "select",
                                            "value"
                                          ])(eventArgs[0]);
                                        }}
                                        options={[
                                          {
                                            value: "option1",
                                            label: "Option 1"
                                          },
                                          {
                                            value: "option2",
                                            label: "Option 2"
                                          }
                                        ]}
                                        value={generateStateValueProp($state, [
                                          "select",
                                          "value"
                                        ])}
                                      />
                                    </div>
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.columns__ufmkQ
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.column__pXMfO
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__haOsV
                                        )}
                                      >
                                        {"Enter some text"}
                                      </div>
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.column__gVkR
                                      )}
                                    >
                                      <Select
                                        data-plasmic-name={"select2"}
                                        data-plasmic-override={
                                          overrides.select2
                                        }
                                        className={classNames(
                                          "__wab_instance",
                                          sty.select2
                                        )}
                                        onChange={(...eventArgs) => {
                                          generateStateOnChangeProp($state, [
                                            "select2",
                                            "value"
                                          ])(eventArgs[0]);
                                        }}
                                        options={[
                                          {
                                            value: "option1",
                                            label: "Option 1"
                                          },
                                          {
                                            value: "option2",
                                            label: "Option 2"
                                          }
                                        ]}
                                        value={generateStateValueProp($state, [
                                          "select2",
                                          "value"
                                        ])}
                                      />
                                    </div>
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.columns__wjVaa
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.column__fPdLv
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__evaXd
                                        )}
                                      >
                                        {"Enter some text"}
                                      </div>
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.column__frAA
                                      )}
                                    >
                                      <Select
                                        data-plasmic-name={"select3"}
                                        data-plasmic-override={
                                          overrides.select3
                                        }
                                        className={classNames(
                                          "__wab_instance",
                                          sty.select3
                                        )}
                                        onChange={(...eventArgs) => {
                                          generateStateOnChangeProp($state, [
                                            "select3",
                                            "value"
                                          ])(eventArgs[0]);
                                        }}
                                        options={[
                                          {
                                            value: "option1",
                                            label: "Option 1"
                                          },
                                          {
                                            value: "option2",
                                            label: "Option 2"
                                          }
                                        ]}
                                        value={generateStateValueProp($state, [
                                          "select3",
                                          "value"
                                        ])}
                                      />
                                    </div>
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.columns__flWWi
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.column__mjGmK
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__kZmcf
                                        )}
                                      >
                                        {"Enter some text"}
                                      </div>
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.column__y5ZjI
                                      )}
                                    >
                                      <Select
                                        data-plasmic-name={"select4"}
                                        data-plasmic-override={
                                          overrides.select4
                                        }
                                        className={classNames(
                                          "__wab_instance",
                                          sty.select4
                                        )}
                                        onChange={(...eventArgs) => {
                                          generateStateOnChangeProp($state, [
                                            "select4",
                                            "value"
                                          ])(eventArgs[0]);
                                        }}
                                        options={[
                                          {
                                            value: "option1",
                                            label: "Option 1"
                                          },
                                          {
                                            value: "option2",
                                            label: "Option 2"
                                          }
                                        ]}
                                        value={generateStateValueProp($state, [
                                          "select4",
                                          "value"
                                        ])}
                                      />
                                    </div>
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.columns___1YbyG
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.column__qQmP1
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text___8RcSp
                                        )}
                                      >
                                        {"Enter some text"}
                                      </div>
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.column__jg4B4
                                      )}
                                    >
                                      <Select
                                        data-plasmic-name={"select5"}
                                        data-plasmic-override={
                                          overrides.select5
                                        }
                                        className={classNames(
                                          "__wab_instance",
                                          sty.select5
                                        )}
                                        onChange={(...eventArgs) => {
                                          generateStateOnChangeProp($state, [
                                            "select5",
                                            "value"
                                          ])(eventArgs[0]);
                                        }}
                                        options={[
                                          {
                                            value: "option1",
                                            label: "Option 1"
                                          },
                                          {
                                            value: "option2",
                                            label: "Option 2"
                                          }
                                        ]}
                                        value={generateStateValueProp($state, [
                                          "select5",
                                          "value"
                                        ])}
                                      />
                                    </div>
                                  </div>
                                </div>
                              </div>
                            </Stack__>
                          </div>
                        </TabContent>
                        <TabContent
                          className={classNames(
                            "__wab_instance",
                            sty.tabContent__zJgpC
                          )}
                          tabKey={"tab2"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__zfpm5
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__czLF
                              )}
                            >
                              {"Some content for tab 2"}
                            </div>
                          </div>
                        </TabContent>
                      </div>
                    </div>
                  )}
                </DataCtxReader__>
              </TabsContainer>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  cpc: [
    "cpc",
    "tabsContainer",
    "tabUnderline",
    "select7",
    "select8",
    "select9",
    "select10",
    "select11",
    "select",
    "select2",
    "select3",
    "select4",
    "select5"
  ],
  tabsContainer: [
    "tabsContainer",
    "tabUnderline",
    "select7",
    "select8",
    "select9",
    "select10",
    "select11",
    "select",
    "select2",
    "select3",
    "select4",
    "select5"
  ],
  tabUnderline: ["tabUnderline"],
  select7: ["select7"],
  select8: ["select8"],
  select9: ["select9"],
  select10: ["select10"],
  select11: ["select11"],
  select: ["select"],
  select2: ["select2"],
  select3: ["select3"],
  select4: ["select4"],
  select5: ["select5"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  cpc: "div";
  tabsContainer: typeof TabsContainer;
  tabUnderline: typeof TabUnderline;
  select7: typeof Select;
  select8: typeof Select;
  select9: typeof Select;
  select10: typeof Select;
  select11: typeof Select;
  select: typeof Select;
  select2: typeof Select;
  select3: typeof Select;
  select4: typeof Select;
  select5: typeof Select;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "cpc") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("cpc"),
  {
    // Helper components rendering sub-elements
    tabsContainer: makeNodeComponent("tabsContainer"),
    tabUnderline: makeNodeComponent("tabUnderline"),
    select7: makeNodeComponent("select7"),
    select8: makeNodeComponent("select8"),
    select9: makeNodeComponent("select9"),
    select10: makeNodeComponent("select10"),
    select11: makeNodeComponent("select11"),
    select: makeNodeComponent("select"),
    select2: makeNodeComponent("select2"),
    select3: makeNodeComponent("select3"),
    select4: makeNodeComponent("select4"),
    select5: makeNodeComponent("select5"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
